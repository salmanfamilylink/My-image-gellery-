<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Queue Image Uploader</title>

    <!-- Google Fonts: Poppins -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">

    <!-- Latest Font Awesome CDN -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <style>
        :root {
            --primary-color: #5ffbf1;
            --secondary-color: #86a8e7;
            --gradient-start: #d16ba5;
            --text-color: #fff;
            --dark-text: #111;
            --bg-glass: rgba(255, 255, 255, 0.15);
            --border-glass: 1px solid rgba(255, 255, 255, 0.2);
            --shadow-color: rgba(31, 38, 135, 0.37);
        }
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Poppins', sans-serif; }
        body { display: flex; justify-content: center; align-items: center; min-height: 100vh; background: linear-gradient(to right top, var(--gradient-start), var(--secondary-color), var(--primary-color)); color: var(--text-color); padding: 20px; }
        .container { width: 100%; max-width: 550px; }
        .card { padding: 40px; background: var(--bg-glass); border-radius: 20px; box-shadow: 0 8px 32px 0 var(--shadow-color); backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px); border: var(--border-glass); text-align: center; }
        h1, h2 { font-weight: 600; margin-bottom: 10px; }
        h1 i, h2 i { margin-right: 10px; }
        .subtitle, #summaryText { font-size: 1rem; color: #e0e0e0; margin-bottom: 30px; }
        .action-button { background: var(--primary-color); border: none; color: var(--dark-text); padding: 15px 30px; border-radius: 10px; cursor: pointer; font-size: 1.1rem; font-weight: 600; transition: all 0.3s ease; width: 100%; margin-top: 20px; }
        .action-button:hover { transform: translateY(-3px); box-shadow: 0 4px 15px rgba(95, 251, 241, 0.4); }
        
        /* Queue/Staging Area Styles */
        #stagingArea { margin-top: 30px; text-align: left; }
        #fileQueueList { list-style: none; max-height: 250px; overflow-y: auto; padding-right: 10px; }
        .queue-item { display: flex; align-items: center; background: rgba(0,0,0,0.2); padding: 10px; border-radius: 8px; margin-bottom: 10px; animation: fadeIn 0.3s ease; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(-10px); } to { opacity: 1; transform: translateY(0); } }
        .queue-item .thumbnail { width: 50px; height: 50px; border-radius: 6px; object-fit: cover; margin-right: 15px; }
        .queue-item .file-info { flex-grow: 1; overflow: hidden; }
        .queue-item .file-name { font-weight: 500; white-space: nowrap; text-overflow: ellipsis; overflow: hidden; }
        .queue-item .remove-btn { background: transparent; border: none; color: #ff6b6b; font-size: 1.2rem; cursor: pointer; padding: 5px; }
        #queueActions button { margin: 5px; }
        
        /* Progress & Results Styles */
        #progressCard .spinner { font-size: 4rem; margin-bottom: 25px; }
        #progressText { font-size: 1.2rem; font-weight: 500; }
        #linkFormatSelector { width: 100%; padding: 12px; background: rgba(0,0,0,0.2); border: 1px solid rgba(255,255,255,0.3); border-radius: 8px; color: var(--text-color); font-size: 1rem; outline: none; cursor: pointer; margin-bottom: 20px; }
        #linkFormatSelector option { background: #333; }
        #linksTextarea { width: 100%; height: 200px; background: rgba(0,0,0,0.2); border: 1px solid rgba(255,255,255,0.3); border-radius: 8px; color: var(--text-color); padding: 15px; font-size: 0.95rem; resize: vertical; outline: none; margin-bottom: 30px; }
        .action-buttons { display: flex; justify-content: center; gap: 20px; flex-wrap: wrap; }
        .action-buttons button { background: var(--primary-color); border: none; color: var(--dark-text); padding: 12px 25px; border-radius: 8px; cursor: pointer; font-size: 1rem; font-weight: 600; transition: all 0.3s ease; }
        .action-buttons button#resetButton { background-color: var(--secondary-color); }
        
        .hidden { display: none !important; }
        .toast { position: fixed; bottom: -100px; left: 50%; transform: translateX(-50%); background: rgba(0,0,0,0.8); color: white; padding: 12px 25px; border-radius: 25px; font-size: 1rem; font-weight: 500; transition: bottom 0.5s ease-in-out; z-index: 1000; }
        .toast.show { bottom: 30px; }
    </style>
</head>
<body>
    <div class="container">
        <!-- Card 1: Uploader -->
        <div class="card" id="uploadCard">
            <h1><i class="fa-solid fa-list-check"></i> Image Queue Uploader</h1>
            <p class="subtitle">Add images one by one to the queue</p>
            
            <input type="file" id="fileInput" accept="image/*" hidden>
            
            <div id="stagingArea" class="hidden">
                <p style="margin-bottom: 10px; font-weight: 500;">Your selected images:</p>
                <ul id="fileQueueList"></ul>
            </div>
            
            <div id="queueActions">
                <button class="action-button" id="addImageButton"><i class="fa-solid fa-plus"></i> Add Image</button>
                <button class="action-button hidden" id="uploadAllButton" style="background-color: #4CAF50;"><i class="fa-solid fa-cloud-arrow-up"></i> Upload All</button>
            </div>
        </div>

        <!-- Card 2: Progress -->
        <div class="card hidden" id="progressCard">
            <h2><i class="fa-solid fa-hourglass-half"></i> Uploading...</h2>
            <i class="fa-solid fa-spinner fa-spin spinner"></i>
            <p id="progressText"></p>
        </div>

        <!-- Card 3: Results -->
        <div class="card hidden" id="resultsCard">
            <h2><i class="fa-solid fa-check-double"></i> Upload Complete!</h2>
            <p id="summaryText"></p>
            <select id="linkFormatSelector">
                <option value="direct">Direct Links</option>
                <option value="viewer">Viewer Links</option>
                <option value="html_full">HTML Full Linked</option>
                <option value="bbcode_full">BBCode Full Linked</option>
                <option value="markdown">Markdown Links</option>
            </select>
            <textarea id="linksTextarea" readonly></textarea>
            <div class="action-buttons">
                <button id="copyAllButton"><i class="fa-solid fa-copy"></i> Copy All Links</button>
                <button id="resetButton"><i class="fa-solid fa-upload"></i> Upload More</button>
            </div>
        </div>
    </div>
    
    <div class="toast" id="toast"></div>

    <script>
        const API_KEY = '4a7f5b7c494ef7be645e940eceeec792';

        // DOM Elements
        const uploadCard = document.getElementById('uploadCard');
        const progressCard = document.getElementById('progressCard');
        const resultsCard = document.getElementById('resultsCard');
        const fileInput = document.getElementById('fileInput');
        const addImageButton = document.getElementById('addImageButton');
        const uploadAllButton = document.getElementById('uploadAllButton');
        const stagingArea = document.getElementById('stagingArea');
        const fileQueueList = document.getElementById('fileQueueList');
        const progressText = document.getElementById('progressText');
        const summaryText = document.getElementById('summaryText');
        const linkFormatSelector = document.getElementById('linkFormatSelector');
        const linksTextarea = document.getElementById('linksTextarea');
        const copyAllButton = document.getElementById('copyAllButton');
        const resetButton = document.getElementById('resetButton');
        const toast = document.getElementById('toast');

        let fileQueue = [];
        let successfulUploadsData = [];

        // --- Event Listeners ---
        addImageButton.addEventListener('click', () => fileInput.click());
        
        fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                if (!file.type.startsWith('image/')) {
                    showToast('Please select an image file.', true);
                    return;
                }
                fileQueue.push(file);
                updateQueueUI();
            }
            fileInput.value = ''; // Reset input to allow selecting the same file again
        });

        fileQueueList.addEventListener('click', (e) => {
            if (e.target.classList.contains('remove-btn') || e.target.parentElement.classList.contains('remove-btn')) {
                const index = e.target.closest('.queue-item').dataset.index;
                fileQueue.splice(index, 1);
                updateQueueUI();
            }
        });

        uploadAllButton.addEventListener('click', handleUploadAll);
        linkFormatSelector.addEventListener('change', updateLinksTextarea);
        copyAllButton.addEventListener('click', copyLinks);
        resetButton.addEventListener('click', resetUploader);
        
        function updateQueueUI() {
            fileQueueList.innerHTML = '';
            if (fileQueue.length > 0) {
                stagingArea.classList.remove('hidden');
                uploadAllButton.classList.remove('hidden');
                addImageButton.innerHTML = `<i class="fa-solid fa-plus"></i> Add More Images (${fileQueue.length})`;
            } else {
                stagingArea.classList.add('hidden');
                uploadAllButton.classList.add('hidden');
                addImageButton.innerHTML = '<i class="fa-solid fa-plus"></i> Add Image';
            }

            fileQueue.forEach((file, index) => {
                const li = document.createElement('li');
                li.className = 'queue-item';
                li.dataset.index = index;
                li.innerHTML = `
                    <img src="${URL.createObjectURL(file)}" class="thumbnail" alt="preview">
                    <div class="file-info">
                        <div class="file-name">${file.name}</div>
                    </div>
                    <button class="remove-btn" title="Remove"><i class="fa-solid fa-xmark"></i></button>
                `;
                fileQueueList.appendChild(li);
            });
        }

        async function handleUploadAll() {
            if (fileQueue.length === 0) {
                showToast('Please add some images first.', true);
                return;
            }

            uploadCard.classList.add('hidden');
            progressCard.classList.remove('hidden');
            resultsCard.classList.add('hidden');
            
            successfulUploadsData = [];
            const totalFiles = fileQueue.length;

            for (const [index, file] of fileQueue.entries()) {
                progressText.textContent = `Uploading ${index + 1} of ${totalFiles}...`;
                const resultData = await uploadImage(file);
                if (resultData) {
                    successfulUploadsData.push(resultData);
                }
            }

            progressCard.classList.add('hidden');
            resultsCard.classList.remove('hidden');
            summaryText.textContent = `Successfully uploaded ${successfulUploadsData.length} out of ${totalFiles} images.`;
            updateLinksTextarea();
        }

        async function uploadImage(file) {
            const formData = new FormData();
            formData.append('image', file);
            try {
                const response = await fetch(`https://api.imgbb.com/1/upload?key=${API_KEY}`, { method: 'POST', body: formData });
                const data = await response.json();
                return data.success ? data.data : null;
            } catch (error) {
                showToast(`Failed to upload ${file.name}.`, true);
                return null;
            }
        }
        
        function updateLinksTextarea() {
            const format = linkFormatSelector.value;
            const links = successfulUploadsData.map(data => {
                switch (format) {
                    case 'direct': return data.url;
                    case 'viewer': return data.url_viewer;
                    case 'html_full': return `<a href="${data.url_viewer}"><img src="${data.url}" alt="${data.title}" border="0"></a>`;
                    case 'bbcode_full': return `[url=${data.url_viewer}][img]${data.url}[/img][/url]`;
                    case 'markdown': return `[![${data.title}](${data.thumb.url})](${data.url_viewer})`;
                    default: return data.url;
                }
            }).join('\n');
            linksTextarea.value = links;
        }

        function copyLinks() {
            if (!linksTextarea.value) {
                showToast('No links to copy.', true); return;
            }
            navigator.clipboard.writeText(linksTextarea.value)
                .then(() => showToast('All links copied!'))
                .catch(() => showToast('Failed to copy.', true));
        }

        function resetUploader() {
            fileQueue = [];
            successfulUploadsData = [];
            updateQueueUI();
            uploadCard.classList.remove('hidden');
            progressCard.classList.add('hidden');
            resultsCard.classList.add('hidden');
        }

        let toastTimeout;
        function showToast(message, isError = false) {
            clearTimeout(toastTimeout);
            toast.textContent = message;
            toast.style.backgroundColor = isError ? 'rgba(217, 83, 79, 0.9)' : 'rgba(30, 30, 30, 0.9)';
            toast.classList.add('show');
            toastTimeout = setTimeout(() => toast.classList.remove('show'), 3000);
        }
    </script>
</body>
</html>
